#!/bin/bash

# Basic error handling
set -e

# Check ffmpeg dependency
if ! command -v "ffmpeg" &> /dev/null; then
    echo "Error: ffmpeg is required but not found."
    echo "Please install ffmpeg before running this script."
    exit 1
fi

# Display usage instructions if no directory provided
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <directory_path>"
    echo "Example: $0 ~/Downloads/MyAudiobook"
    exit 1
fi

# Get absolute path and book title from directory name
WORKDIR=$(cd "$1" && pwd)
BOOK_TITLE=$(basename "$WORKDIR")
echo "Processing audiobook: $BOOK_TITLE"

# Change to working directory
cd "$WORKDIR"

# Create list of audio files
echo "Creating list of audio files..."
find . -maxdepth 1 -name "*.mp3" -type f | sort | sed "s/^\\.\\/*/file '/;s/$/\'/" > audiofiles.txt

if [ -f audiofiles.txt ]; then
    echo "Audio files list created:"
    cat audiofiles.txt
else
    echo "Error: Failed to create audiofiles.txt"
    exit 1
fi

# Get the bitrate of the first file
FIRST_FILE=$(head -n 1 audiofiles.txt | sed "s/file '//;s/'//")
BITRATE=$(ffprobe -v error -select_streams a:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 "$FIRST_FILE")

# If bitrate detection fails, provide a warning and default to input file's bitrate
if [ -z "$BITRATE" ] || [ "$BITRATE" = "N/A" ]; then
    echo "Warning: Could not detect input bitrate, will maintain input file's bitrate"
    BITRATE_OPT=""
else
    BITRATE_OPT="-b:a ${BITRATE}"
fi

# Check if metadata.json exists
if [ -f "metadata/metadata.json" ]; then
    echo "Found metadata.json, using it for chapter information..."
    python3 ~/bin/convert_chapters.py metadata/metadata.json
    python3 ~/bin/convert_to_ffmpeg_chapters.py chapters.txt
else
    echo "No metadata.json found, using MP3 filenames for chapters..."
    # Create chapters metadata from MP3 files
    echo "Generating chapter metadata..."
    echo ";FFMETADATA1" > ffmpeg_chapters.txt

    current_time=0
    while IFS= read -r line; do
        # Extract filename without path and extension
        filename=$(basename "$line" .mp3)
        filename=${filename#"file '"}
        filename=${filename%"'"}
        
        # Get duration of current file
        duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$filename")
        duration=${duration%.*} # Remove decimal places
        
        # Write chapter metadata
        echo "[CHAPTER]" >> ffmpeg_chapters.txt
        echo "TIMEBASE=1/1" >> ffmpeg_chapters.txt
        echo "START=$current_time" >> ffmpeg_chapters.txt
        next_time=$((current_time + duration))
        echo "END=$next_time" >> ffmpeg_chapters.txt
        echo "title=$filename" >> ffmpeg_chapters.txt
        
        current_time=$next_time
    done < audiofiles.txt
fi

# Convert to M4B with chapters
echo "Converting to M4B format..."
# Get the bitrate of the first file
FIRST_FILE=$(head -n 1 audiofiles.txt | sed "s/file '//;s/'//")
BITRATE=$(ffprobe -v error -select_streams a:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 "$FIRST_FILE")

# If bitrate detection fails, provide a warning and default to input file's bitrate
if [ -z "$BITRATE" ] || [ "$BITRATE" = "N/A" ]; then
    echo "Warning: Could not detect input bitrate, will maintain input file's bitrate"
    BITRATE_OPT=""
else
    BITRATE_OPT="-b:a ${BITRATE}"
fi

# Convert to M4B with chapters
echo "Converting to M4B format..."
ffmpeg -f concat -safe 0 -i audiofiles.txt \
    -i ffmpeg_chapters.txt \
    -map_metadata 1 \
    -c:a aac $BITRATE_OPT \
    -movflags +faststart \
    "${BOOK_TITLE}.m4b"

echo "Conversion complete!"
echo "Output file: ${BOOK_TITLE}.m4b"
echo "You can now test the audiobook in your preferred player."

# Cleanup temporary files
echo "Cleaning up temporary files..."
rm -f audiofiles.txt ffmpeg_chapters.txt chapters.json
